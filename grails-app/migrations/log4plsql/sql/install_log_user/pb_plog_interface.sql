DECLARE
--*******************************************************************************
--   Anonymous block creating dynamically the body of the package PLOG_INTERFACE.
--   This package is an interface between the main log package PLOG and the output packages.
--   The block checks which output packages have been installed (installation choices) and calls in
--   the functions PLOG_INTERFACE.log() or PLOG_INTERFACE.purge() one or several log 
--   functions of the installed output packages.
--
--   Ver    Date        Autor             Comment
--   -----  ----------  ----------------  ---------------------------------------
--   1.0    17.04.2008  Bertrand Caradec  First version
--*******************************************************************************

  l_static_sql_1 VARCHAR2(4000);
  l_static_sql_2 VARCHAR2(2000);
  l_static_sql_3 VARCHAR2(2000);
  l_dynamic_sql_1 VARCHAR2(2000);
  l_dynamic_sql_2 VARCHAR2(2000);
  
  l_package_name VARCHAR2(100);
  l_separator VARCHAR2(100) := '
  
  ';
  
  -- cursor selecting the installed output packages with a log function
  CURSOR curs_package_log IS
  SELECT OBJECT_NAME 
  FROM USER_OBJECTS
  WHERE OBJECT_TYPE = 'PACKAGE' AND
  OBJECT_NAME IN ('PLOG_OUT_TLOG', 'PLOG_OUT_TRACE',
  'PLOG_OUT_ALERT', 'PLOG_OUT_AQ', 'PLOG_OUT_DBMS_OUTPUT',
  'PLOG_OUT_SESSION');
  
  -- cursor selecting the installed output packages with a purge function
  CURSOR curs_package_purge IS
  SELECT OBJECT_NAME 
  FROM USER_OBJECTS
  WHERE OBJECT_TYPE = 'PACKAGE' AND
  OBJECT_NAME IN ('PLOG_OUT_TLOG', 'PLOG_OUT_AQ');
  
BEGIN

-- build the beginning of the package 
l_static_sql_1 := 'CREATE OR REPLACE
PACKAGE BODY PLOG_INTERFACE AS
--*******************************************************************************
--   NAME:   PLOG_INTERFACE (body)
--
--   Interface between the main log package PLOG and the output packages.
--   This body is dynamically built during the installation. The log functions of the
--   output packages are called if the corresponding packages have been installed.
--
--   Ver    Date        Autor             Comment
--   -----  ----------  ----------------  ---------------------------------------
--   1.0    17.04.2008  Bertrand Caradec  First version
--*******************************************************************************


  PROCEDURE log
(
    pCTX        IN    OUT NOCOPY   PLOGPARAM.LOG_CTX           ,  
    pID         IN        TLOG.id%TYPE                      ,
    pLDate      IN        TLOG.ldate%TYPE                   ,
    pLHSECS     IN        TLOG.lhsecs%TYPE                  ,
    pLLEVEL     IN        TLOG.llevel%TYPE                  ,
    pLSECTION   IN        TLOG.lsection%TYPE                ,
    pLUSER      IN        TLOG.luser%TYPE                   ,
    pLTEXT      IN        TLOG.LTEXT%TYPE,
		pLTAG       IN        TLOG.LTAG%TYPE
) AS
--*******************************************************************************
--   NAME:   log
--
--   PARAMETERS:
--
--      pCTX               log context
--      pID                ID of the log message, generated by the sequence
--      pLDate             Date of the log message (SYSDATE)
--      pLHSECS            Number of seconds since the beginning of the epoch
--      pLLEVEL            Log level as numeric value
--      pLSection          formated call stack
--      pLUSER             database user (SYSUSER)
--      pLTEXT             log text
--
--   Public. Function created dynamically during the installation. 
--   Calls the log functions of the packages that have been installed.
--
--   Ver    Date        Autor             Comment
--   -----  ----------  ---------------   ----------------------------------------
--   1.0    17.04.2008  Bertrand Caradec  Initial version
--*******************************************************************************
BEGIN' || l_separator;


-- build the first dynamic part (call to output log functions of the installed packages)
OPEN curs_package_log;

LOOP 
  FETCH curs_package_log INTO l_package_name;
  EXIT WHEN curs_package_log%NOTFOUND;
  l_dynamic_sql_1 := l_dynamic_sql_1 || 
                  l_package_name || 
                  '.log(pCTX, pID, pLDate, pLHSECS, pLLEVEL, pLSECTION, pLUSER, pLTEXT, pLTAG);' || 
                  l_separator;
END LOOP;

CLOSE curs_package_log;
  
-- buld the second static part: end of log function, begin purge function
l_static_sql_2 := ' 
END log;


 PROCEDURE purge
(
    pMaxDate IN DATE DEFAULT NULL 
) AS
--******************************************************************************
--   NAME:   purge
--
--   PARAMETERS:
--
--      pMaxDate    Date before which records are deleted          
--
--   Public. Function created dynamically during the installation.
--   Calls the purge functions of the packages that have been installed.
--
--   Ver    Date        Autor             Comment
--   -----  ----------  ---------------   --------------------------------------
--   1.0    17.04.2008  Bertrand Caradec  Initial version
--******************************************************************************
BEGIN' || l_separator;

-- build the second dynamic part (call to output purge functions of the installed packages)
OPEN curs_package_purge;

LOOP 
  FETCH curs_package_purge INTO l_package_name;
  EXIT WHEN curs_package_purge%NOTFOUND;
  l_dynamic_sql_2 := l_dynamic_sql_2 || 
                  l_package_name || 
                  '.purge(pMaxDate);' || 
                  l_separator;
END LOOP;

-- buld the last part: end the purge function and the package
l_static_sql_3 := ' 
END purge;

END; ';


-- create the package with dynamic SQL
EXECUTE IMMEDIATE(l_static_sql_1 || l_dynamic_sql_1 || l_static_sql_2 || l_dynamic_sql_2 || l_static_sql_3);
END;
/